---
import Menu from "@icons/Menu.astro";
import AnimatedText from "@components/AnimatedText.astro";
import type { HeaderProps } from "@types";

type Props = HeaderProps;

const { navLinks } = Astro.props;
---

<header class="max-w-5xl mx-auto flex items-center justify-between px-5 py-8 relative border-b border-neutral/20">
  <a href="/" aria-label="Home link" class="flex items-center">
    <AnimatedText text="ðŸ’» DiseÃ±ador de Sitios Web ðŸš€" />
  </a>

  <button
    type="button"
    id="menu-button"
    class="sm:hidden text-neutral px-2 py-1"
    aria-expanded="false"
    aria-controls="main-menu"
  >
    <Menu />
  </button>

  <nav
    class="hidden text-neutral border absolute right-5 top-24 bg-black border-neutral/40 py-6 px-4 rounded-xl sm:block sm:border-0 sm:p-0 sm:static sm:bg-transparent"
    id="main-menu"
  >
    <ul class="sm:flex gap-4">
      {
        navLinks.map((link) => (
          <li class="relative">
            <a
              class={`font-medium text-base px-4 py-2 block hover:text-primary nav-item transition-colors duration-300`}
              href={link.href}
              data-nav-link
            >
              {link.text}
            </a>
          </li>
        ))
      }
    </ul>
  </nav>
</header>

<script>
  const button = document.querySelector("#menu-button");
  const menu = document.querySelector("#main-menu");
  const navItems = document.querySelectorAll("#main-menu > ul > li");

  const toggleMenu = () => {
    menu?.classList.toggle("hidden");
    const isHidden = menu?.classList.contains("hidden");
    button?.setAttribute("aria-expanded", `${!isHidden}`);
  };

  button?.addEventListener("click", toggleMenu);
  navItems.forEach((item) => {
    item?.addEventListener("click", toggleMenu);
  });

  function smoothScroll(target: string) {
    if (!target) return;
    const element = document.querySelector(target);
    if (!element) return;

    const startPosition = window.scrollY;
    const targetPosition = element.getBoundingClientRect().top + window.scrollY;
    const footerOffset = 0;
    const distance = targetPosition - startPosition + footerOffset;
    const duration = 500;
    let start: number | null = null;

    function animation(currentTime: number) {
      if (start === null) start = currentTime;
      const timeElapsed = currentTime - start;
      const run = ease(timeElapsed, startPosition, distance, duration);
      window.scrollTo(0, run);
      if (timeElapsed < duration) requestAnimationFrame(animation);
    }

    function ease(t: number, b: number, c: number, d: number) {
      t /= d / 2;
      if (t < 1) return (c / 2) * t * t + b;
      t--;
      return (-c / 2) * (t * (t - 2) - 1) + b;
    }

    requestAnimationFrame(animation);
  }

  const links = document.querySelectorAll('a[href^="#"]');
  links.forEach((link) => {
    link.addEventListener("click", (e) => {
      e.preventDefault();
      const target = (e.currentTarget as HTMLAnchorElement).getAttribute("href");
      if (target) {
        smoothScroll(target);
      }
    });
  });
</script>
